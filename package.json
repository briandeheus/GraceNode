{
  "name": "GraceNode",
  "description": "framework for nodejs application",
  "version": "0.1.0",
  "author": {
    "name": "Nobuyori Takahashi",
    "email": "voltrue2@yahoo.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/voltrue2/GraceNode.git"
  },
  "dependencies": {
    "async": ">= 0.2.9",
    "uglify-js": ">= 2.4.0",
    "password-hash": ">= 1.2.1",
    "memcached": ">= 0.2.5",
    "mysql": ">= 2.0.0-alpha9",
    "jshint": ">= 2.2.0",
    "bcrypt": ">= 0.7.7",
    "node-uuid": ">= 1.4.1",
    "cookies": ">=0.3.8",
    "mongodb": ">= 1.3.19",
    "redis": ">= 0.9.1",
    "apn": ">= 1.4.4",
    "node-gcm": "0.9.8"
  },
  "engine": "node >= 0.10.20",
  "readme": "Author: Nobuyori Takahashi\n\nSince 2013 to present\n\n##How to set it up\n<pre>\n$ cd yourApp/\n$ git clone https://github.com/voltrue2/GraceNode GraceNode\n$ cd GraceNode/\n$ npm install\n</pre>\n\n> If you execute the above commands and every thing goes fine, GraceNode is successfully installed along with its dependencies\n\n##Create configuration files\n<pre>\n$ cd yourApp/\n$ mkdir configs/\n</pre>\n> You will then create your configuration file(s) under configs/ directory. The format is JSON. For reference please refer to GraceNode/example-config.json\n\n##index.js file for bootstrapping\n<pre>\n$ cd yourApp/\n$ ls -la\n$ ..\n$  .\n$ index.js\n$ GraceNode/\n</pre>\n> GraceNode needs to be set up for it to run correctly.\n>> Below is the example code to set up GraceNode in index.js\n\n```javascript\nvar gracenode = require('../GraceNode');\n// tell GraceNode where to look for configuration file(s)\n// we will explain the effect of the function \"gracenode.getRootPath()\" later.\ngracenode.setConfigPath(gracenode.getRootPath() + 'configs/');\n// tell GraceNode the name(s) of configuration files to load\ngracenode.setConfigFiles(['base.json', 'modules.json']);\n// decide what module(s) of GraceNode to use in your application.\n// this will be explained in more detail later.\ngracenode.use('server');\ngracenode.use('view');\ngracenode.use('mysql');\n// now start the set up process\ngracenode.setup(function (error) {\n    if (error) {\n        throw new Error('GraceNode failed to set up: ' + error);\n    }\n    // GraceNode is ready to go\n\n});\n```\n\n## GraceNode Methods\n\n##### setConfigPath\n<pre>\nvoid setConfigPath(String configDirectoryPath)\n</pre>\n> Give GraceNode the directory path to the configuration files\n\n##### setConfigFiles\n<pre>\nvoid setConfigFiles(Array configFileList)\n</pre>\n> Give GraceNode the list of configuration files to be used (the files must be in the directory given to setConfigFiles)\n\n##### use\n<pre>\nvoid use(String moduleName, Object optionalParams)\n</pre>\n> Indicate what module to use (this function can be used to load both built-in and custom modules)\n>> optionalParams\n```javascript\n{ \n\tpath: 'path to the source code of the custom module',\n\tconfigName: 'name of configuration to be used'\n}\n```\n\n> Example\n```javascript\n// load and use GraceNode mysql built-in module\ngracenode.use('mysql');\n// load and use custom module\ngracenode.use('myMod', { path: 'app/customModules/myMod' });\n```\n\n##### setup\n<pre>\nvoid setup(Function callback)\n</pre>\n> Start the set-up process of GraceNode\n\n##### exit\n<pre>\nvoid exit(String errorMessage)\n</pre>\n> Stop GraceNode process\n>> errorMessage is optional and if given GraceNode will stop with an error\n\n#### getModuleSchema\n<pre>\nvoid getModuleSchema(String moduleName, Function callback)\n</pre>\n> Extracts and passes SQL schema(s) for a GraceNode built-in module such as iap, and wallet\n>> This function should NOT be used in production.\n\n## GraceNode Events\n\n##### setup.config\n<pre>\ngracenode.on('setup.config', callbackFunction)\n</pre>\n> Emitted when config module has been set up\n\n##### setup.log\n<pre>\ngracenode.on('setup.log', callbackFunction)\n</pre>\n> Emitted when log module has been set up\n\n##### setup.complete\n<pre>\ngracenode.on('setup.complete', callbackFunction)\n</pre>\n> Emitted when setup method finishes\n\n##### setup.moduleName\n<pre>\ngracenode.on('setup.moduleName', callbackFunction);\n</pre>\n> Emitted when a module has been set up\n\n##### uncaughtException\n<pre>\ngracenode.on('uncaughtException', callbackFunction)\n</pre>\n> Emitted when GraceNode catches uncaught exception\n\n##### exit\n<pre>\ngracenode.on('exit')\n</pre>\n> Emitted when GraceNode process exits\n\n##### shutdown\n<pre>\ngracenode.on('shutdown')\n</pre>\n> Emitted when GraceNode detects SIGINT\n\n## Cluster Mode\n> GraceNode can spwan multiple processes to go in cluster-mode if used in multi-core system\n```javascript\n// Configurations\n\"cluster\": {\n\t\"enable\": true or false // if true, GraceNode will be ready to go into cluster-mode\n\t\"max\": <number> // maximum number of processes allowed in cluster-mode\n}\n```\n\n## GraceNode Built-in Modules\n> GraceNode has some built-in modules.\n\n#### Automatically loaded by GraceNode on setup\n- <a href=\"#config-module\">config</a>\n- <a href=\"#log-module\">log</a>\n- <a href=\"#profiler-module\">profiler</a>\n- <a href=\"#lib-module\">lib</a>\n\n#### Other optional modules\n- <a href=\"#staticdata-module\">staticdata</a>\n- <a href=\"#request-module\">request</a>\n- <a href=\"#server-module\">server</a>\n- <a href=\"#udp-module\">udp</a>\n- <a href=\"#view-module\">view</a>\n- <a href=\"#session-module\">session</a>\n- <a href=\"#encrypt-module\">encrypt</a>\n- <a href=\"#mysql-module\">mysql</a>\n- <a href=\"#memcache-module\">memcache</a>\n- <a href=\"#asset-module\">asset</a>\n- <a href=\"#iap-module\">iap (In-App-Purchase with Apple and Google Play)</a>\n- <a href=\"#wallet-module\">wallet</a>\n\n### Built-in Modules\n\n***\n#### <span id=\"config-module\">config module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n*** \n\nAccess\n<pre>\ngracenode.config\n</pre>\n\nConfigurations\n*N/A*\n\n#####API: *getOne*\n\n<pre>\nmixed getOne(String propName)\n</pre>\n> Returns the value of configuration property\n>> Example\n\n```javascript\n// configuration JSON\n{ \"foo\": \n    { \n         \"boo\": 1\n    }\n}\n// query the value of \"foo\"\nvar foo = gracenode.config.getOne(\"foo\");\n// foo = { \"boo\": 1 };\n\n// query the value of \"boo\"\nvar boo = gracenode.config.getOne(\"foo.boo\");\n// boo = 1\n```\n\n#####API: *getMany*\n\n<pre>\nObject getMany(Array propNameList)\n</pre>\n> Returns the values of configuration properties\n\n***\n#### <span id=\"log-module\">log module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n```javascript\nvar log = gracenode.log.create('nameToBeDisplayed');\n```\n\nConfigurations\n```javascript\n{\n\t\"modules\":\n\t\t\"log\": {\n\t\t\t\"type\": \"stdout\" or \"file\",\n\t\t\t\"color\": true or false,\n\t\t\t\"level\": {\n\t\t\t\t\"verbose\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" },\n\t\t\t\t\"debug\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" },\n\t\t\t\t\"info\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" },\n\t\t\t\t\"warning\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" },\n\t\t\t\t\"error\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" },\n\t\t\t\t\"fatal\": { \"enabled\": true or false, \"path\": \"file path for the log file to be written (required if type is \"file\")\" }\n\t\t\t}\n\t\t}\n}\n```\n\n#####API: *verbose*\n\n<pre>\nvoid verbose(mixed data, [...])\n</pre>\n\n#####API: *debug*\n\n<pre>\nvoid debug(mixed data, [...])\n</pre>\n\n#####API: *info*\n\n<pre>\nvoid info(mixed data, [...])\n</pre>\n\n#####API: *warning*\n\n<pre>\nvoid warning(mixed data, [...])\n</pre>\n\n#####API: *error*\n\n<pre>\nvoid error(mixed data, [...])\n</pre>\n\n#####API: *fatal*\n\n<pre>\nvoid fatal(mixed data, [...])\n</pre>\n\n***\n#### <span id=\"profiler-module\">profiler module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenote.profiler\n</pre>\n\nConfigurations\n*N/A*\n\n####API: *create*\n<pre>\nProfiler create(String name)\n</pre>\n> Returns an instance of Profiler class\n\n##### Profiler class\n\n> **start**\n<pre>\nvoid start()\n</pre>\nStarts profiling\n\n> **mark**\n<pre>\nvoid mark(String benchmarkPointName)\n</pre>\nCalculate elapsed time between marks and output on profiler.stop()\n\n> **stop**\n<pre>\nvoid stop()\n</pre>\nStops profiler and output the profiling results\n\n***\n#### <span id=\"lib-module\">lib module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.lib\n</pre>\n\nConfigurations *N/A*\n\n#####API: *randomInt*\n<pre>\nInt randomInt(Int min, Int max)\n</pre>\n> Returns pseudo-random integer between min and max\n\n#####API: *randomArray*\n<pre>\nMixed randomArray(Array list)\n</pre>\n> returns a randomly selected element from the given array\n\n#####API: *cloneObj*\n<pre>\nMixed cloneObj(Mixed original)\n</pre>\n> creates a copy of the given value\n\n#####API: *getArguments*\n<pre>\nArray getArguments(Function func)\n</pre>\n> Returns an array of arguments for the given function\n\n```javascript\n\nfunction foo(num1, num2) {\n\treturn num1 + num2;\n}\n\nvar args = gracenode.lib.getArguments(foo);\n// args = [\"num1\", \"num2\"];\n```\n\n#####API: *walkDir*\n<pre>\nvoid walkDir(String path, Function callback)\n</pre>\n> Recursively walks the given path and passes an array of file paths to the callback function\n\n\n***\n#### <span id=\"staticdata-module\">staticdata module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\n// do this in your bootstrap file (index.js) before invoking gracenode.setup().\ngracenode.use('gracenode', 'gracenode');\n// once gracenode.setup is finished. you can access the module as following:\ngracenode.staticdata\n</pre>\n\nConfigurations\n```javascript\n// staticdata module supports CSV and JSON format\n{\n\t\"modules\": {\n\t\t\"staticdata\": {\n\t\t\t\"path\": \"directory path to the static files\",\n\t\t\t\"linebreak\": optional and defaults to '\\n', // for parsing CSV files\n\t\t\t\"delimiter\": optional and defaults to ',', // for parsing CSV files\n\t\t\t\"quote\": optional and defaults to '\"' // for parsing CSV files\n\t\t\t\"index\": { // optional // for getOneByIndex and getManyByIndex\n\t\t\t\t\"staticFileName\": [\"indexName\", [...]]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n#####API: *create*\n<pre>\nStaticData create(String dataName)\n</pre>\n> Returns and instance of StaticData class\n>> Example:\n```javascript\n/* \nIn order to create a static data object from a static data file called \"example.csv\",\ndo the following:\n*/\nvar example = gracenode.staticdata.create('example');\n```\n\n##### StaticData class\n\n> **getOneByIndex**\n<pre>\nmixed getOneByIndex(String indexName, String indexKey, Function callback)\n</pre>\n**getManyByIndex**\n<pre>\nmixed getManyByIndex(String indexName, Array indexKeyList, Function callback)\n</pre>\n**getOne**\n<pre>\nmixed getOne(mixed key, Function callback)\n</pre>\n**getMany**\n<pre>\nmixed getMany(Array keyList, Function callback)\n</pre>\n**getAll**\n<pre>\nmixed getAll(Function calback)\n</pre>\n**getAllByIndexName**\n<pre>\nmixed getAllByIndexName(String indexName)\n</pre>\n\n***\n#### <span id=\"request-module\">request module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.request\n</pre>\n\nConfigurations\nN/A\n\n#####API: *send*\n<pre>\nvoid send(Object params, Object options, Function callback)\n</pre>\n> Sends an HTTP or HTTPS request and recieve the response\n>> ```javascript\n// arguments\n// params\n{\n\tprotocol: 'http' or 'https',\n\thost: 'host name',\n\tpath: 'URI',\n\tport: int,\n\tmethod: string,\n\tdata: object\n}\n// options\n{\n\theaders: object,\n\ttimeout: int (in miliseconds)\n}\n// usage example\nrequest.send(params, options, function (error, response) {\n\t// do something there\n});\n```\n\n***\n#### <span id=\"server-module\">server module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.server\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"server\": {\n\t\t\"protocol\": \"http\" or \"https\",\n\t\t\"pemKey\": \"file path to pem key file\" // https only\n\t\t\"pemCert\": \"file path to pem cert file\" // https only\n\t\t\"port\": port number,\n\t\t\"host\": host name or IP address,\n\t\t\"controllerPath\": path to controller directory,\n\t\t\"ignored\": ['name of ignored URI'...],\n\t\t\"error\": {\n\t\t\t\"404\": {\n\t\t\t\t\"controller\": controller name,\n\t\t\t\t\"method\": public controller method\n\t\t\t},\n\t\t\t\"500\": ...\n\t\t},\n\t\t\"reroute\": [\n\t\t\t{\n\t\t\t\t\"from\": '/',\n\t\t\t\t\"to\": 'another/place'\n\t\t\t},\n\t\t\t...\n\t\t]\n\t}\n}\n```\n\n####SSL server\n> GraceNode has bash scripts to help set up HTTPS server\n<pre>\nGraceNode/scripts/sslcertgen.sh //for production\nGraceNode/scripts/sslcertgen-dev.sh //for development\n</pre>\n\n######API: *start*\n\n<pre>\nvoid start()\n</pre>\n> Starts an HTTP or HTTPS server\n\n#####API: *events*\n\n<pre>\nEventEmitter events()\n</pre>\n> Returns an instance of EventEmitter\n>> Events: requestStart, requestEnd\n\n######API: *setRequestHook*\n\n<pre>\nvoid setRequestHook(Object hooks)\n</pre>\n> assign a function to be invoked on every request (each hook callback function is assigned to specific controller method).\n>> Should be used for session validatation etc\nExample:\n```javascript\ngracenode.server.setupRequestHooks({\n\tmyController: {\n\t\tmyPage: checkSession\n\t}\n});\nfunction checkSession(request, callback) {\n\tvar sessionId = request.getCookie('sessionId');\n\tgracenode.session.getSession(sessionId, function (error, session) {\n\t\tif (error) {\n\t\t\treturn cb(error);\n\t\t}\n\t\tif (!session) {\n\t\t\t// no session\n\t\t\treturn cb(new Error('auth error', 403));\n\t\t}\n\t\t// session found\n\t\tcb();\n\t});\n}\n// this will apply checkSession function as a request hook to ALL controller and methods\nvar hooks = checkSession;\n// this will apply checkSession function as a request hook to ALL methods of myController\nvar hooks = {\n\tmyController: checkSession\n};\n// this will apply checkSession function as a request hook to myPage of myController only\nvar hooks = {\n\tmyController: {\n\t\tmyPage: checkSession\n\t}\n};\n// set up request hooks\ngracenode.server.seupRequestHooks(hooks);\n```\n\n###### Example:\n> Example of how to set up a server\n```javascript\n// index.js file of an application\nvar gracenode = require('./GraceNode/');\ngracenode.use('server', 'server');\ngracenode.setup(function (error) {\n\tif (error) {\n\t\tthrow new Error('failed to set up GraceNode');\n\t}\n\t// we start the server as soon as GraceNode is ready\n\tgracenode.server.start();\n});\n```\n> Controller\n```javascript\n// controller/example/index.js > /example/foo/\nvar gracenode = require('../GraceNode/');\n// this will become part of the URI\n// the first argument is **ALWAYS** requestObject\nmodule.exports.foo = function (requestObject, serverResponse) {\n\t// serverResponse is created by server module per request\n\tserverResponse.json({ foo: 'foo' });\n};\n// /example/foo/ will display \"foo\" on your browser\n```\n\n> How to read GET, POST, DELETE, and PUT\n```javascript\n// controller file\nmodule.exrpots.index = function (requestObject, response) {\n\t// server module automatically gives every controller the following functions:\n\t// requestObject.getData and requestObject.postData\n\tvar getFoo = requestObject.getData.get('foo');\n\tvar postFoo = requestObject.postData.get('foo');\n\tvar putFoo = requreObject.putData.get('foo');\n\tvar deleteFoo = requreObject.deleteData.get('foo');\n\tresponse.json(null);\n};\n```\n\n> How to read request headers\n```javascript\n// controller file\nmodule.exports.index = function (requestObject, response) {\n\t// server module automatically gives every contrller the following function:\n\t// requestObject.requestHeaders > an instance of Headers class\n\tvar os = requestObject.requestHeaders.getOs();\n};\n```\n\n> ### How to read URL fragments:\n```javascript\n// URL: http://mydomain.com/myControler/myMethod/one/two/three/\nexports.myMethod = function (requestObject, responseObject) {\n\tvar params = requestObject.parameters;\n\tconsole.log(params);\n\t// this will output as follows:\n\t/*\n\t[\n\t\t\"one\",\n\t\t\"two\",\n\t\t\"three\"\n\t]\n\t*/\n};\n```\n\n> #### response object\n\n>> **response.json**\n>> resonds to the client as JSON\n>> status code is optional and default is 200\n<pre>\nVoid response.json(Mixed content, Integer status)\n</pre>\n\n>> **response.html**\n>> resonds to the client as HTML\n>> status code is optional and default is 200\n<pre>\nVoid response.html(String content, Integer status)\n</pre>\n\n>> **response.file**\n>> resonds to the client as a static file\n>> status code is optional and default is 200\n<pre>\nVoid response.file(Binary content, Integer status)\n</pre>\n\n>> **response.error**\n>> resonds to the client as an error. content can be JSON, String, Number\n>> status code is optional and default is 200\n<pre>\nVoid response.error(Mixed content, Integer status)\n</pre>\n\n\n> #### Headers class\n>> Access\n```javascript\nmodule.exports.index = function (requestObject, response) {\n\tvar requestHeaders = requestObject.requestHeaders;\n};\n```\n\n>> **get**\n<pre>\nString get(String headerName)\n</pre>\n\n>> **getOs**\n<pre>\nString getOs()\n</pre>\n\n>> **getClient**\n<pre>\nString getClient()\n</pre>\n\n>> **getDefaultLang**\n<pre>\nString getDefaultLang\n</pre>\n\n> How to set response headers\n```javascript\n// controller\nmodule.exports.index = function (requestObject, response) {\n\t// name, value\n\tresponse.header('foo', 'foo');\n};\n```\n\n> How to get and set cookie\n```javascript\n// controller\nmodule.exports.index = function (requestObject, response) {\n\t// get\n\tvar foo = requestObject.cookies.get('foo');\n\t// set\n\trequestObject.cookies('boo', 'boo');\t\n};\n```\n\n> How to handle and pass parameters\n```javascript\n// controller\n// request URI /foo/index/one/two/\nmodule.exports.index = function (requestObject, one, two, response) {\n\t// one and two are  the values in the request URI\n\t// by having these parameters and the arguments, these arguments will become requirements\n\t// missing arguments will cause and error\n};\n```\n\n> How to redirect to another URL\n```javascript\n// controller\n// request URI /foo/index/\nmodule.exports.index = function (requestObject, response) {\n\tresponse.redirect('/anotherPage/');\n};\n```\n\n***\n#### <span id=\"view-module\">view module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.view\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"view\": {\n\t\t\"preload\": [\"file path\"...], // optional\n\t\t\"minify\": true or false // default is true > minify css and js files\n\t}\n}\n```\n\n#####API: *create*\n\n<pre>\nView create()\n</pre>\n> Returns an instance of View object\n\n##### View class\n\n> **assign**\n<pre>\nvoid assign(String name, mixed value)\n</pre>\n> Assigns a variable to be embeded to view file(s)\n>> Exmple:\n<pre>\n// controller\ngracenode.view.assign('foo', 'hello world');\n// view file\n(:= foo :)\n// output\nhello world\n</pre>\n\n> **get**\n<pre>\nmixed get(String name)\n</pre>\n> Get assigned value\n\n> **load**\n<pre>\nvoid load(String vilewFilePath, Function callback)\n</pre>\n> Loads a view file.\n```javascript\n// controller file\nmodule.exports.index = function (cb) {\n\tgracenode.view.assign('foo', 'hello world');\n\tgracenode.view.load('/foo/index.html', function (error, contentData) {\n\t\tif (error) {\n\t\t\treturn cb(error);\n\t\t}\n\t\tcb(null, contentData, 'HTML');\n\t});\n};\n// this will output \"hello world\"\n```\n\n###### How to include view files\n```html\n<!-- include header HTML file -->\n<div class=\"header\">\n(:include common/header.html :)\n</div>\n<!-- include CSS file -->\n<style type=\"text/css\">\n(:include css/main.css :)\n</style>\n<!-- include Javascript file -->\n<script type=\"text/javascript\">\n(:include js/main.js :)\n</script>\n<!-- include ALL files in the directory -->\n<div class=\"content\">\n(:include content/ :)\n</div>\n```\n>> All included files have access to the variables assigned by **assign** function.\n>>> All assigned variables are also available as Javascript variables in the client under window.gracenode object\n\n###### Notes\n> There is no **if** nor **for-loop** in view module because view template files are just template files and should not contain any sort of logic.\n>> If you need to generate a list of items or change the display depending on certain conditions, please use *Javascript* to do so. After all we are using Nodejs.\n\n***\n#### <span id=\"session-module\">session module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.session\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"session\": {\n\t\t\"hosts\": [\"host:port\", \"host:port\"...],\n\t\t\"ttl\": int (in seconds),\n\t\t\"options\": object\n\t}\n}\n```\n\n#####API: *getSession*\n\n<pre>\nvoid getSession(String sessionId, Function callback)\n</pre>\n> Passes a session object to the callback\n\n#####API: *setSession*\n<pre>\nvoid setSession(String, sessionId, mixed value, Function callback)\n</pre>\n\n***\n#### <span id=\"encrypt-module\">encrypt module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.encrypt\n</pre>\n\nConfigurations\nN/A\n\n#####API: *createHash*\n\n<pre>\nvoid createHash(String sourceStr, Int cost, Function callback)\n</pre>\n> Creates a hash with salt from **sourceStr**\n>> This function uses <a href=\"https://github.com/ncb000gt/node.bcrypt.js/\">bcrypt</a> module and it is based on blowfish encryption.\n>>> bigger the cost the slower this function will become.\n\n#####API: *validateHash*\n\n<pre>\nvoid validateHash(String str, String hash, Function callback)\n</pre>\n> Validates a hash and **str**\n\n#####API: *createSalt*\n\n<pre>\nvoid createSalt(Int cost, Function callback)\n</pre>\n> Creates a salt.\n\n#####API: *uuid*\n\n<pre>\nString uuid(Int version, Object options, Buffer buffer, Array offset)\n</pre>\n> Creates a uuid. This module uses <a href=\"https://github.com/broofa/node-uuid\">node-uuid</a> module.\n>> Possible values for **version** are *1* or *4*\n>>> Version 1 is timestamp-base and version 4 is random-base\n\n***\n#### <span id=\"mysql-module\">mysql module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.mysql\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"mysql\": {\n\t\t\"configNameOfYourChoice\": {\n\t\t\t\"database\": \"databaseName\",\n\t\t\t\"host\": \"host or IP address\",\n\t\t\t\"maxPoolNum\": number <optional> default is 10\n\t\t\t\"user\": \"databaseUser\",\n\t\t\t\"password\": \"databasePassword\",\n\t\t\t\"type\": \"ro\" or \"rw\" // \"ro\" for Read Only and \"rw\" for Read and Write\n\t\t}...\n\t}\n}\n```\n\n#####API: *create*\n<pre>\nMySql create(String configName)\n</pre>\n> Returns an instance of MySql class\n\n##### MySql class\n\n> **getOne**\n<pre>\nvoid getOne(String sql, Array params, Function callback)\n</pre>\n> Executes a \"select\" SQL query and passes a result to callback.\n>> If no result is found, the funtion will throw an error.\n```javascript\nvar mysql = gracenode.mysql.create('peopleDb');\nmysql.getOne('SELECT age, gender FROM people WHERE name = ?', ['bob'], function (error, result) {\n\tif (error) {\n\t\tthrow new Error('nothing found');\n\t}\t\n\t// do something here\n});\n```\n\n> **getMany**\n<pre>\nvoid getMany(String sql, Array params, Function callback)\n</pre>\n> Executes a \"select\" SQL query and passes results to callback\n>> If no result is found, the function will throw an error.\n\n> **searchOne**\n<pre>\nvoid searchOne(String sql, Array params, Function callback)\n</pre>\n> Executes a \"select\" SQL query and passes a result to callback\n>> No result will **NOT** throw an error.\n\n\n> **searchMany**\n<pre>\nvoid searchMany(String sql, Array params, Function callback)\n</pre>\n> Executes a \"select\" SQL query and passes results to callback\n>> No result will **NOT** throw an error.\n\n> **write**\n<pre>\nvoid write(String sql, Array params, Function callback)\n</pre>\n> Executes \"insert/update/delete/truncate/alter/create/drop/\" SQL query\n>> Can **NOT** be executed if the *type* is \"ro\"\n\n> **transaction**\n<pre>\nvoid transaction(Function taskCallback, Function callback)\n</pre>\n> Creates Mysql transaction and allows you to execute transactional SQL queries in taskCallback.\n>> Commit will be executed automatically on successful execution of taskCallback\n>>> An error in taskCallback will cause auto-rollback and ends the transaction.\n>>>> Can **NOT** be executed if the *type* is \"ro\"\n```javascript\nvar mysql = gracenode.mysql.create('animalDb');\nmysql.transaction(function (finishCallback) {\n\tmysql.write('INSERT INTO animal (name, species) VALUES(?, ?)', ['dog', 'knine'], function (error, res) {\n\t\tif (error) {\n\t\t\treturn finishCallback(error);\n\t\t}\n\t\tmysql.write('INSERT INTO food (animalName, amount) VALUES(?, ?)', ['dog', 10], function (error, res) {\n\t\t\tif (error) {\n\t\t\t\treturn finishCallback(error);\n\t\t\t}\n\t\t\t// taskCallback is done. now move forward\n\t\t\tfinishCallback();\n\t\t});\n\t});\n}, \nfunction (error) {\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n\t// All done and committed\n});\n```\n\n> **placeHolder**\n<pre>\nArray placeHolder(Array params)\n</pre>\n> Creates and returns an array of *?* based on params given.\n```javascript\nvar mysql = gracenode.create('people');\nvar params = ['jenny', 'ben', 'krista', 'ken'];\nmysql.searchMany('SELECT * FROM people WHERE name IN (' + mylsq.placeHolder(params) + ')', params, function (error, res) {\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\t\n\t// do something here\n});\n```\n\n***\n#### <span id=\"datacache-module\">datacache module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.datacache\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"hosts\": [\"hostName\"...] or { \"hostName\": int (load balance)...},\n\t\"ttl\": int, // in seconds\n\t\"options\": Object\n}\n```\n\n#####API: *create*\n\n<pre>\nCache create(String name)\n</pre>\n> Returns an instance of Cache class. \n>> Cache class uses memcache.\n\n##### Cache class\n\n> **get**\n<pre>\nvoid get(String key, Function callback)\n</pre>\n> Read a value associated with the given key.\n```javascript\nvar peopleTable = gracenode.mysql.create('people');\nvar peopleCache = gracenode.datacache.create('people');\nvar sql = 'SELECT * FROM people WHERE name = ?';\nvar params = ['bob'];\npeopleCache.get(sql + params.json(''), function (error, value) {\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n\tif (value) {\n\t\t// we found the value > do something with it.\n\t} else {\n\t\t// no cache found\n\t\tpeopleTable.getOne(sql, param, function (error, res) {\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(error);\n\t\t\t}\n\t\t\t// set cache\n\t\t\tpeopleCache.set(sql + params.json(''), res, function (error) {\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new Error(error);\n\t\t\t\t}\n\t\t\t\t// we are done\n\t\t\t});\n\t\t});\n\t});\n});\n```\n\n> **set**\n<pre>\nvoid set(String key, mixed value, Function callback)\n</pre>\n> Sets a value associated with the given key.\n```javascript\nvar peopleTable = gracenode.mysql.create('people');\nvar peopleCache = gracenode.datacache.create('people');\nvar sql = 'SELECT * FROM people WHERE name = ?';\nvar params = ['bob'];\npeopleCache.get(sql + params.json(''), function (error, value) {\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n\tif (value) {\n\t\t// we found the value > do something with it.\n\t} else {\n\t\t// no cache found\n\t\tpeopleTable.getOne(sql, param, function (error, res) {\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(error);\n\t\t\t}\n\t\t\t// set cache\n\t\t\tpeopleCache.set(sql + params.json(''), res, function (error) {\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new Error(error);\n\t\t\t\t}\n\t\t\t\t// we are done\n\t\t\t});\n\t\t});\n\t});\n});\n```\n\n> How to flush old cache\n```javascript\n// flush old cache value on updated mysql data\nvar peopleTable = gracenode.mysql.create('people');\nvar peopleCache = gracenode.datacache.create('people');\nvar sql = 'UPDATE people SET age = ? WHERE name = ?';\nvar params = [40, 'bob'];\npeopleTable.write(sql, params, function (error) {\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n\t// successfully updated > now we need to flush out the old cache\n\tpeopleCache.update(function (error) {\n\t\tif (error) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t\t// we are done\n\t});\n});\n```\n\n***\n#### <span id=\"asset-module\">asset module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.asset\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"asset\": {\n\t\t\"path\": \"pathToAssetDirectory\"\n\t}\n}\n```\n\n#####API: *getOne*\n\n<pre>\nObject getOne(String pathName)\n</pre>\n> Returns asset file object(s). \n>>\n```javascript\n// to get a file object of /img/backgrounds/bg001.png\nvar bg001 = gracenode.asset.getOne('img/backgrounds/bg001');\n/*\n* bg001 will be:\n* { key: 'img/backgrounds/bg001', type: 'png', hash: 'fd8g0f8gd==' }\n*/\n// to get all file objects in /img/backgrounds/\nvar backgrounds = gracenode.asset.getOne('img/backgrounds/');\n/*\n* backgrounds will be:\n* { bg001: {file object}, bg002: {file object}, bg003: {file object} }\n*/\n```\n\n#####API: *getMany*\n\n<pre>\nArray getMany(Array pathNameList)\n</pre>\n> Returns an array of asset file object(s)\n\n#####API: *getDataByKey*\n\n<pre>\nObject getDataByKey(String assetFileKey)\n</pre>\n> Returns an asset data object\n\n```javascript\n// to get the binary data of /img/backgrounds/bg001.png\nvar bg001 = gracenode.asset.getOne('img/backgrounds/bg001');\nvar bg001Data = gracenode.asset.getDataByKey(bg001.key);\n/*\n* bg001Data will be:\n* { data: binary data of the file, path: '~asset/img/backgrounds/bg001.png' }\n*/\n```\n\n#####API: getDataByKeyAndHash\n\n<pre>\nObject getDataByKeyAndHash(String assetFileKey, String assetFileHash, Function callback)\n</pre>\n> Returns an asset data object.\n>> If the file hash is old, the function will read the file and update the cache map before returning the data object\n\n```javascript\nvar bg001 = gracenode.asset.getOne('img/backgrounds/bg001');\ngracenode.asset.getDataByKeyAndHash(bg001.key, bg001.hash, function (error, bg001Data) {\n\tif (error) {\n\t\t// handle error\n\t}\n\t// do something here\n});\n```\n\n***\n#### <span id=\"udp-module\">udp module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.udp\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"udp\": {\n\t\t\"servers\": [\n\t\t\t{ name: \"unique name for server\", \"host\": \"host name or IP\", \"port\": port number }[...]\n\t\t],\n\t\t\"requests\": {\n\t\t\t\"unique request name\": { \"host\": \"host name or IP\", \"port\": port number }\n\t\t}\n\t}\n}\n```\n\n#####API: *startServers*\n\n<pre>\nvoid startServers(Function callback)\n</pre>\n> Starts all UDP servers and calls the callback function when all the servers are up\n\n#####API: *getServerByName*\n\n<pre>\nObject getServerByName(String serverName)\n</pre>\n> Returns a server object by a server name defined in the configurations\n>> *startServer* MUST be called before invoking this function\n\nExample\n```javascript\nvar server = gracenode.udp.getServerByName('server');\n\n// handle UDP message requests\nserver.on('message', function (messageBuffer, requestObj) {\n\t// do something\n});\n\n// handle error\nserver.on('error', function (error) {\n\t// handle error\n});\n```\n\n#####API: send\n\n<pre>\nvoid send(String requestName, Mixed message, Object options, Function callback)\n</pre>\n> Sends a UDP packet message to destination named in the configurations\n>> The callback returns error as the first argument and bytes sent as the second argument\n\n***\n#### <span id=\"iap-module\">iap module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.iap\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"iap\": {\n\t\t\"sandbox\": true or false,\n\t\t\"sql\": {\n\t\t\t\"read\": \"mysql module configuration name\",\n\t\t\t\"write\": \"mysql module configuration name\"\n\t\t},\n\t\t\"googlePublicKeyPath\": \"path to google play public key files\" // the file names MUST be specific (for live: iap-live, for sandbox: iap-sandbox)\n\t}\n}\n```\n\n#####API: *validateApplePurchase*\n\n<pre>\nvoid validateApplePurchase(String receipt, Function cb)\n</pre>\n> Sends an HTTPS request to Apple to validate the given receipt and responds back an object { validateState: 'validated' or 'error', status: 'pending' or 'handled' or 'canceled' }\n\n#####API: *validateGooglePurchase*\n\n<pre>\nvoid validateGooglePurchase(Object receipt, Function cb)\n</pre>\n> Validates the receipt with public key using open SSL\n\n#####API: *updateStatus*\n\n<pre>\nvoid updateStatus(Mixed receipt, String status, Function cb)\n</pre>\n> Updates the status of the given receipt. the valid status are: pending, handled, canceled.\n\n\n***\n#### <span id=\"wallet-module\">wallet module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.wallet\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"names\": [an array of wallet names],\n\t\"sql\": {\n\t\t\"read\": \"mysql module configuration name\",\n\t\t\"write\": \"mysql module configuration name\"\n\t} \n}\n```\n\n#####API: *create*\n\n<pre>\nWallet create(String walletName)\n</pre>\n> Returns an instance of Wallet class by a wallet name\n>> The wallet name needs to be defined in the configuration file\n\n##### Wallet class\n\n> **getBalanceByUserId**\n<pre>\nvoid getBalanceByUserId(String uniqueUserId, Function callback)\n</pre>\n> Rerturns the current balance of a wallet in the callback as a second argument\n\n> **addPaid**\n<pre>\nvoid addPaid(String uniqueReceiptHash, String uniqueUserId, Int price, Int value, Function onCallback<optional>, Function callback)\n</pre>\n> Adds the value to a wallet as \"paid\"\n>> \"paid\" represents that the user has paid real money\n\n>> If onCallback is given: the function will be called BEFORE committing the \"add\" transaction, if an error occuries in onCallback, the transaction can be rolled back\n\n> **addFree**\n<pre>\nvoid addFree(String uniqueReceiptHash, String uniqueUserId, Int value, Function onCallback<optional>, Function callback)\n</pre>\n> Adds the value to a wallet as \"free\"\n>> \"free\" represents that the user has been given the value as free gift\n\n>> If onCallback is given: the function will be called BEFORE committing the \"add\" transaction, if an error occuries in onCallback, the transaction can be rolled back\n\nExample:\n```javascript\n// example code with iap module\ngracenode.iap.validateApplePurchase(receipt, function (error, response) {\n\tif (error) {\n\t\t// handle error here\n\t}\n\t\n\t// check the validated state\n\tif (response.validateState === 'validated') {\n\t\t// Apple has validated the purchase\n\t\t\n\t\tvar hc = gracenode.wallet.create('hc');\n\t\thc.addPaid(receipt, userId, itemPrice, itemValue, \n\t\t\t\n\t\t\t// this callback will be called BEFORE the commit of \"addPaid\"\n\t\t\tfunction (continueCallback) {\n\t\t\t\t\n\t\t\t\t// update iap status to mark the receipt as \"handled\"\n\t\t\t\tgracenode.iap.updateStatus(receipt, 'handled', function (error) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\t// error on updating the status to \"handled\"\n\t\t\t\t\t\treturn continueCallback(error); // this will make \"addPaid\" to auto-rollback\n\t\t\t\t\t}\n\n\t\t\t\t\t// iap receipt status updated to \"handled\" now commit\n\t\t\t\t\tcontinueCallback();\t\t\t\n\n\t\t\t\t})\n\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\t// this callback is to finalize \"addPaid\" transaction\n\t\t\tfunction (error) {\n\t\t\t\tif (error) {\n\t\t\t\t\t// error on finalizing the transaction\n\t\t\t\t}\n\n\t\t\t\t// we are done!\n\t\t\t}\t\n\t\n\t\t);\n\t\t\n\t}\n\n});\n\n\n```\n\n> **spend**\n<pre>\nvoid spend(String uniqueUserId, Int value, String spendFor, Function onCallback, Function callback)\n</pre>\n> Spends value from a wallet if allowed\n>> spendFor should represent what the user has spend the value for\n\n>> If onCallback is given: the function will be called BEFORE committing the \"spend\" transaction, if an error occuries in onCallback, the transaction can be rolled back\n\nExample:\n```javascript\n// example of how to use wallet.spend\nvar itemToBePurchased = 'test.item.1000';\nvar cost = 1000; // this is the amount that will be taken out of wallet 'hc'\nvar hc = gracenode.wallet.create('hc');\nhc.spend(userId, cost, itemIdToBePurchase,\n\t\n\t// this callback will be called BEFORE the commit of \"spend\"\n\tfunction (continueCallback) {\n\n\t\t// give the user what the user is spending value for\n\t\tuser.giveItemByUserId(userId, itemToBePurchased, function (error) {\n\t\t\tif (error) {\n\t\t\t\t// failed to give the user the item\n\t\t\t\treturn continueCallback(error); // rollback\n\t\t\t}\n\t\t\t\n\t\t\t// succuessfully gave the user the item\n\t\t\tcontinueCallback();\n\n\t\t});\t\n\t},\n\n\t// this callback is to finalize \"spend\" transaction\n\tfunction (error) {\n\t\tif (error) {\n\t\t\t// error on finalizing the transaction\n\t\t}\n\n\t\t// we are done!\n\t}\n\n);\n\n```\n\n***\n#### <span id=\"memcache-module\">memcache module</span>\n<a href=\"#top\">Back to the list of built-in modules</a>\n***\n\nAccess\n<pre>\ngracenode.memcache\n</pre>\n\nConfigurations\n```javascript\n\"modules\": {\n\t\"memcache\": {\n\t\t\"hosts\": [\"host:port\", \"host:port\"...],\n\t\t\"ttl\": int (in seconds),\n\t\t\"options\": object\n\t}\n}\n```\n\n#####API: *create*\n\n<pre>\nCache create(String name)\n</pre>\n> Returns and instance of Cache object with \"name\" as a prefix of every key\n\n##### Cache class\n\n> **getOne**\n<pre>\nvoid getOne(String key, Function callback)\n</pre>\n\n> **getMany**\n<pre>\nvoid getMany(Array keyList, Function callback)\n</pre>\n\n> **set**\n<pre>\nvoid set(String, key, Mixed value, Function callback);\n</pre>\n\n> **replace**\n<pre>\nvoid relace(String key, Mixed value, Function callback)\n</pre>\n\n> **del**\n<pre>\nvoid del(String key, Function callback)\n</pre>\n\n\n### Useing GraceNode With Apache\n> apache configuration example\n\n```xml\n# proxy to nodejs process\n<VirtualHost *:80>\n    ServerAdmin yourname@yourdomain.com\n    DocumentRoot /var/www/yourdomain.com/htdocs\n    ServerName yourdomain.com\n\n    ProxyRequests off\n\n    <Proxy *>\n        Order deny,allow\n        Allow from all\n    </Proxy>\n\n    ProxyPreserveHost on\n    ProxyPass /asset ! # do not proxy this path\n    ProxyPass / http://yourdomain.com:8000/ # proxy everything else to GraceNode\n    ProxyPassReverse / yourdomain.com:8000/\n\n</VirtualHost>\n```\n",
  "readmeFilename": "README.md",
  "_id": "GraceNode@0.1.0",
  "dist": {
    "shasum": "4d8f1b008ed78fc360efe0a6430e02f0172b8434"
  },
  "_resolved": "git+https://github.com/voltrue2/GraceNode.git#2880eda409dbe5bc129ba228f8358c58b825b03f",
  "_from": "GraceNode@git+https://github.com/voltrue2/GraceNode.git#master"
}
